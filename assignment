#include <FastLED.h>
#include <OneButton.h>
#include <SoftwareSerial.h>
#define NUM_LEDS  10
#define LED_PIN   2
#define BTN_PIN   3       
char rec;
CRGB leds[NUM_LEDS];
int brightness;  //LED亮度变量
int serialData;  //串口数据变量
uint8_t patternCounter = 0;
SoftwareSerial BT(8, 9); // 接收腳, 傳送腳
char val;
// Push button connected between pin 7 and GND (no resistor required)
OneButton btn = OneButton(BTN_PIN, true, true);

void setup() {
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(50);
  Serial.begin(9600);

  BT.begin(9600);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(9, OUTPUT);
  
  btn.attachClick(nextPattern);
}

void loop() {
  
  switch (patternCounter) {
    case 0:
      movingDots();
      break;
    case 1:
      rainbowBeat();
      break;
    case 2:
      redWhiteBlue();
      break;
  }
  
  FastLED.show();
  btn.tick();

    if( BT.available()>0 ){ 
    
    serialData =  BT.read();   
    
    if (serialData == '1' ) {  //接收到点亮LED指令
      BT.print("Got command: ");  BT.println(serialData); 
      BT.println("LED-ON");
      
      digitalWrite(2, HIGH);  //点亮LED指令
    } else {    //接收到熄灭LED指令
      BT.print("Got command: ");  
      BT.println(serialData); 
      BT.println("LED-OFF");
 
      digitalWrite(2, LOW);      //熄灭LED指令  
    }      
  }
}

void nextPattern() {
  patternCounter = (patternCounter + 1) % 3;           // Change the number after the % to the number of patterns you have
}

//------- Put your patterns below -------//

void movingDots() {
  
  uint16_t posBeat  = beatsin16(30, 0, NUM_LEDS - 1, 0, 0);
  uint16_t posBeat2 = beatsin16(60, 0, NUM_LEDS - 1, 0, 0);

  uint16_t posBeat3 = beatsin16(30, 0, NUM_LEDS - 1, 0, 32767);
  uint16_t posBeat4 = beatsin16(60, 0, NUM_LEDS - 1, 0, 32767);

  // Wave for LED color
  uint8_t colBeat  = beatsin8(45, 0, 255, 0, 0);

  leds[(posBeat + posBeat2) / 2]  = CHSV(colBeat, 255, 255);
  leds[(posBeat3 + posBeat4) / 2]  = CHSV(colBeat, 255, 255);

  fadeToBlackBy(leds, NUM_LEDS, 10);
}


void rainbowBeat() {
  
  uint16_t beatA = beatsin16(30, 0, 255);
  uint16_t beatB = beatsin16(20, 0, 255);
  fill_rainbow(leds, NUM_LEDS, (beatA+beatB)/2, 8);
}


void redWhiteBlue() {

  uint16_t sinBeat   = beatsin16(30, 0, NUM_LEDS - 1, 0, 0);
  uint16_t sinBeat2  = beatsin16(30, 0, NUM_LEDS - 1, 0, 21845);
  uint16_t sinBeat3  = beatsin16(30, 0, NUM_LEDS - 1, 0, 43690);

  leds[sinBeat]   = CRGB::Blue;
  leds[sinBeat2]  = CRGB::Red;
  leds[sinBeat3]  = CRGB::White;
  
  fadeToBlackBy(leds, NUM_LEDS, 10);
}

